{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","InputChange","event","defineProperty","target","name","value","ButtonNumberHandler","num","setState","Input","state","result","ClearHandler","OperatorHandle","operator","calculateValue","math","error","EqualHandler","_this2","react_default","a","createElement","className","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c90116a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from \"./Button\";\nimport Inputs from \"./Input\"\nimport \"./App.css\";\nimport * as math from 'mathjs';\n\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      Input:'',\n      result:''\n    }\n  }\n// Just to get value present in Input according to their name (Their name is same as state)\n  InputChange=(event)=>({\n    [event.target.name]: event.target.value\n  })\n  // When you press the button the number will be passed as argument and The input field will be updated \n  ButtonNumberHandler=(num)=>{\n    this.setState({\n      //This is because it might not replace the original Number already present there(There means this.state.Input)\n        Input : this.state.Input + num,\n        result: ''\n    })\n  }\n// Clear Button Handler will clear the state \n  ClearHandler=()=>{\n    this.setState({\n      Input : '',\n      result: ''\n    })\n  }\n\n  OperatorHandle=(operator)=>{\n    this.setState({\n      Input : this.state.Input + operator\n    })\n  }\n// Function which will do calculation of whatever input is there\n// (math.evaluate is method for calculation in js)\n  calculateValue=()=>{\n    try{\n      this.setState({\n        result : math.evaluate(this.state.Input)\n      })}\n      catch(error){\n        this.setState({\n          result : 'syntax error'\n        })\n      }\n  }\n//When You Click Equal button It will call CalculateValue Function for Calculation\n  EqualHandler=()=>{\n    this.setState(this.calculateValue());\n  }\n\n  render() {\n    return (\n      <div className=\"container body\">\n        <div className=\"purple-square-container\">\n          <div className=\"purple-square\">\n\n        <div>\n              <input type=\"text\" className=\"d-block inputFix firstinput\" name=\"Input\" value={this.state.Input} onChange={this.InputChange}></input>\n              <input type=\"text\" className=\"d-block inputFix resultinput\" name=\"result\" value={this.state.result} onChange={this.InputChange}></input>\n              <button className=\"btn btn-dark mt-2\" onClick={this.ClearHandler}>Clear</button>\n        </div>\n        <div>\n              <button className=\"btn btn-dark mt-2\"onClick={() => this.ButtonNumberHandler(7)}>7</button>\n              <button className=\"btn btn-dark mt-2 ml-2\"onClick={() => this.ButtonNumberHandler(8)}>8</button>\n              <button className=\"btn btn-dark mt-2 ml-2\"onClick={() => this.ButtonNumberHandler(9)}>9</button>\n              <button className=\"btn btn-dark mt-2 ml-2\"onClick={() => this.OperatorHandle('/')}>/</button>\n\n        </div>\n\n        <div>\n              <button className=\"btn btn-dark mt-2\" onClick={() => this.ButtonNumberHandler(4)}>4</button>\n              <button className=\"btn btn-dark mt-2 ml-2\"onClick={() => this.ButtonNumberHandler(5)}>5</button>\n              <button className=\"btn btn-dark mt-2 ml-2\"onClick={() => this.ButtonNumberHandler(6)}>6</button>\n              <button className=\"btn btn-dark mt-2 ml-2\"onClick={() => this.OperatorHandle('-')}>-</button>\n\n        </div>\n\n        <div>\n              <button className=\"btn btn-dark mt-2\"onClick={() => this.ButtonNumberHandler(1)}>1</button>\n              <button className=\"btn btn-dark mt-2 ml-2\"onClick={() => this.ButtonNumberHandler(2)}>2</button>\n              <button className=\"btn btn-dark mt-2 ml-2\"onClick={() => this.ButtonNumberHandler(3)}>3</button>\n              <button className=\"btn btn-dark mt-2 ml-2\"onClick={() => this.OperatorHandle('*')}>*</button>\n        </div>\n\n        <div>\n              <button className=\"btn btn-dark mt-2 widthbutton\"onClick={() => this.ButtonNumberHandler(0)}>0</button>\n              <button className=\"btn btn-dark mt-2 ml-2 custom\" onClick={() => this.EqualHandler(\"=\")}>=</button>\n              <button className=\"btn btn-dark mt-2 ml-2 custom\"onClick={() => this.OperatorHandle('+')}>+</button>\n        </div>\n\n        </div>\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}